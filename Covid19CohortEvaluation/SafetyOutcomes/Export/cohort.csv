cohort_name,cohort_full_name,cohort_id,sql,json
hospitalizationsWithPneumonia,Hospitalizations with pneumonia,14717,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (255848)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (255848)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 1 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9201)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Visit Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,365,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,0,P.START_DATE) AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.END_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,1,end_date) > start_date then DATEADD(day,1,end_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""VisitOccurrence"": {
          ""CodesetId"": 1,
          ""VisitTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [365],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ALL""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 0,
            ""ConditionTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseIndexEnd"": false,
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseIndexEnd"": true,
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 0,
      ""name"": ""[OHDSI COV19] Pneumonia"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 255848,
              ""CONCEPT_NAME"": ""Pneumonia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""233604007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 1,
      ""name"": ""Inpatient or Inpatient/ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""EndDate""],
      ""Offset"": [1]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
episodesOfAcuteRespiratoryDistress,Episodes of acute respiratory distress,14867,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4191650,4195694,318459)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4191650,4195694,318459)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,1,start_date) > start_date then DATEADD(day,1,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 0,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""ConceptSets"": [
    {
      ""id"": 0,
      ""name"": ""[OHDSI Cov19] Acute respiratory distress"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4191650,
              ""CONCEPT_NAME"": ""Acute respiratory distress"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""373895009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4195694,
              ""CONCEPT_NAME"": ""Acute respiratory distress syndrome"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""67782005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 318459,
              ""CONCEPT_NAME"": ""Respiratory insufficiency"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""409623005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [1]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
chestPainOrAngina,Persons with chest pain or angina,7396,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 3 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (321318,77670)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (321318)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* , row_number() over (PARTITION BY co.person_id ORDER BY co.condition_start_date, co.condition_occurrence_id) as ordinal
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 3))
) C

WHERE C.ordinal = 1
-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 3,
          ""First"": true,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""First""]
    }
  },
  ""ConceptSets"": [
    {
      ""id"": 3,
      ""name"": ""[LEGEND HTN] Chest pain or angina"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 321318,
              ""CONCEPT_NAME"": ""Angina pectoris"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""194828000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 77670,
              ""CONCEPT_NAME"": ""Chest pain"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""29857009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
venousThromboembolicEvents,Venous thromboembolic (pulmonary embolism and deep vein thrombosis) events,7398,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 10 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (440417,254662,444247)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (440417,254662,444247)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (435616,435887,196715,4062269,442055,433832,435026,440477,318137,199837,438820,4235812,195294,4187790)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (435616,435887,196715,4062269,442055,433832,435026,440477,318137,199837,438820,4235812,195294,4187790)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 10))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,1,start_date) > start_date then DATEADD(day,1,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 180, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,180,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 10,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""ConceptSets"": [
    {
      ""id"": 10,
      ""name"": ""[LEGEND HTN] Venous thromboembolism (pulmonary embolism and deep vein thrombosis)"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 435616,
              ""CONCEPT_NAME"": ""Amniotic fluid embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""17263003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 435887,
              ""CONCEPT_NAME"": ""Antepartum deep vein thrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""49956009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 196715,
              ""CONCEPT_NAME"": ""Budd-Chiari syndrome"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""82385007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4062269,
              ""CONCEPT_NAME"": ""Cerebral venous thrombosis in pregnancy"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""200259003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 442055,
              ""CONCEPT_NAME"": ""Obstetric air pulmonary embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""200286003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 433832,
              ""CONCEPT_NAME"": ""Obstetric blood-clot pulmonary embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""200299000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 435026,
              ""CONCEPT_NAME"": ""Obstetric pulmonary embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""200284000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 440477,
              ""CONCEPT_NAME"": ""Obstetric pyemic and septic pulmonary embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""267284008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 318137,
              ""CONCEPT_NAME"": ""Phlebitis and thrombophlebitis of intracranial sinuses"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""192753009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 199837,
              ""CONCEPT_NAME"": ""Portal vein thrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""17920008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 438820,
              ""CONCEPT_NAME"": ""Postpartum deep phlebothrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""56272000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 440417,
              ""CONCEPT_NAME"": ""Pulmonary embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""59282003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 254662,
              ""CONCEPT_NAME"": ""Pulmonary infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""64662007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4235812,
              ""CONCEPT_NAME"": ""Septic thrombophlebitis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""439731006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 195294,
              ""CONCEPT_NAME"": ""Thrombosed hemorrhoids"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""75955007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4187790,
              ""CONCEPT_NAME"": ""Thrombosis of retinal vein"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""46085004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 444247,
              ""CONCEPT_NAME"": ""Venous thrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""111293003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [1]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [180]
  },
  ""CensorWindow"": {}
}
"
acuteRenalFailure,Acute renal failure events,7382,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 8 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (197320,432961,444044)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (197320,432961,444044)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 8))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,30,start_date) > start_date then DATEADD(day,30,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 8,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 8,
      ""name"": ""[LEGEND HTN] Acute Renal Failure"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 197320,
              ""CONCEPT_NAME"": ""Acute renal failure syndrome"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""14669001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 432961,
              ""CONCEPT_NAME"": ""Acute renal papillary necrosis with renal failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""298015003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 444044,
              ""CONCEPT_NAME"": ""Acute tubular necrosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""35455006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [30]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
endStageRenalDisease,Persons with end stage renal disease,7374,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (443611,193782)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (443611,193782)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 1 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4090651,4032243,45889365)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4090651,4032243,45889365)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,1,P.START_DATE) AND A.START_DATE <= DATEADD(day,90,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 1 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Procedure Occurrence Criteria
select C.person_id, C.procedure_occurrence_id as event_id, C.procedure_date as start_date, DATEADD(d,1,C.procedure_date) as END_DATE,
       C.procedure_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.procedure_date as sort_date
from 
(
  select po.* 
  FROM @cdm_database_schema.PROCEDURE_OCCURRENCE po
JOIN #Codesets codesets on ((po.procedure_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Procedure Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,0,P.START_DATE) AND A.START_DATE <= DATEADD(day,90,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 2 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Observation Criteria
select C.person_id, C.observation_id as event_id, C.observation_date as start_date, DATEADD(d,1,C.observation_date) as END_DATE,
       C.observation_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.observation_date as sort_date
from 
(
  select o.* 
  FROM @cdm_database_schema.OBSERVATION o
JOIN #Codesets codesets on ((o.observation_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Observation Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,0,P.START_DATE) AND A.START_DATE <= DATEADD(day,90,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE
WHERE QE.ordinal = 1
;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 0,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 0,
            ""ConditionTypeExclude"": false
          },
          ""ProcedureOccurrence"": {},
          ""Observation"": {}
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 1,
            ""Coeff"": 1
          },
          ""End"": {
            ""Days"": 90,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {},
          ""ProcedureOccurrence"": {
            ""CodesetId"": 1,
            ""ProcedureTypeExclude"": false
          },
          ""Observation"": {}
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""End"": {
            ""Days"": 90,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {},
          ""ProcedureOccurrence"": {},
          ""Observation"": {
            ""CodesetId"": 1,
            ""ObservationTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""End"": {
            ""Days"": 90,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 0,
      ""name"": ""[LEGEND HTN] End stage renal disease"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 443611,
              ""CONCEPT_NAME"": ""Chronic kidney disease stage 5"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""433146000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 193782,
              ""CONCEPT_NAME"": ""End stage renal disease"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""46177005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 1,
      ""name"": ""[LEGEND HTN] Dialysis"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4090651,
              ""CONCEPT_NAME"": ""Dialysis finding"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""251859005"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4032243,
              ""CONCEPT_NAME"": ""Dialysis procedure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""108241001"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Procedure""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 45889365,
              ""CONCEPT_NAME"": ""Dialysis Services and Procedures"",
              ""STANDARD_CONCEPT"": ""C"",
              ""STANDARD_CONCEPT_CAPTION"": ""Classification"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1012740"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""CPT4"",
              ""CONCEPT_CLASS_ID"": ""CPT4 Hierarchy""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
hepaticFailure,Persons with hepatic failure,7381,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (377604,4029488,4245975,4337543)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4245975,4337543)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 0,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""First""]
    }
  },
  ""ConceptSets"": [
    {
      ""id"": 0,
      ""name"": ""[LEGEND HTN] hepatic failure, necrosis or coma"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 377604,
              ""CONCEPT_NAME"": ""Hepatic coma"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""72836002"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4029488,
              ""CONCEPT_NAME"": ""Hepatic encephalopathy"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""13920009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4245975,
              ""CONCEPT_NAME"": ""Hepatic failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""59927004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4337543,
              ""CONCEPT_NAME"": ""Hepatic necrosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""87248009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
acutePancreatitis,Acute pancreatitis events,7400,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 9 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (199074)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (199074)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 9))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 9,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 9,
      ""name"": ""[LEGEND HTN] Acute pancreatitis"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 199074,
              ""CONCEPT_NAME"": ""Acute pancreatitis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""197456007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
heartFailure,Persons with heart failure,7369,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 1 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (316139)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (316139)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (315295)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (315295)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,1,P.START_DATE) AND A.START_DATE <= DATEADD(day,365,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE
WHERE QE.ordinal = 1
;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,1,start_date) > start_date then DATEADD(day,1,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 1,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ALL""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 1,
            ""ConditionTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 1,
            ""Coeff"": 1
          },
          ""End"": {
            ""Days"": 365,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 1,
      ""name"": ""[LEGEND HTN] Heart Failure "",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 315295,
              ""CONCEPT_NAME"": ""Congestive rheumatic heart failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""82523003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 316139,
              ""CONCEPT_NAME"": ""Heart failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""84114007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [1]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
totalCardiovascularDiseaseEvents,"Total cardiovascular disease events (ischemic stroke, hemorrhagic stroke, heart failure, acute myocardial infarction or sudden cardiac death)",7367,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 3 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4329847)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4329847)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (314666)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (314666)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 4 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4048809,321042,442289,4317150,4132309)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4048809,321042,442289,4317150,4132309)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (437894)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (437894)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 5 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (372924,375557,443454,441874)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (443454)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 7 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (376713,439847,432923)

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 9 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (316139)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (316139)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (315295)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (315295)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 3))
) C


-- End Condition Occurrence Criteria

UNION ALL
-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 4))
) C


-- End Condition Occurrence Criteria

UNION ALL
-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 5))
) C


-- End Condition Occurrence Criteria

UNION ALL
-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 7))
) C


-- End Condition Occurrence Criteria

UNION ALL
-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 9))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 180, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,180,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 3,
          ""ConditionTypeExclude"": false
        }
      },
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 4,
          ""ConditionTypeExclude"": false
        }
      },
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 5,
          ""ConditionTypeExclude"": false
        }
      },
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 7,
          ""ConditionTypeExclude"": false
        }
      },
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 9,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ALL""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 3,
      ""name"": ""[LEGEND HTN] Acute myocardial Infarction"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4329847,
              ""CONCEPT_NAME"": ""Myocardial infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""22298006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 314666,
              ""CONCEPT_NAME"": ""Old myocardial infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1755008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 4,
      ""name"": ""[LEGEND HTN] Sudden cardiac death"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4048809,
              ""CONCEPT_NAME"": ""Brainstem death"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""230802007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 321042,
              ""CONCEPT_NAME"": ""Cardiac arrest"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""410429000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 442289,
              ""CONCEPT_NAME"": ""Death in less than 24 hours from onset of symptoms"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""53559009"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4317150,
              ""CONCEPT_NAME"": ""Sudden cardiac death"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""95281009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4132309,
              ""CONCEPT_NAME"": ""Sudden death"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""26636000"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 437894,
              ""CONCEPT_NAME"": ""Ventricular fibrillation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""71908006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 5,
      ""name"": ""[LEGEND HTN] Ischemic stroke"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 372924,
              ""CONCEPT_NAME"": ""Cerebral artery occlusion"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""20059004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 375557,
              ""CONCEPT_NAME"": ""Cerebral embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""75543006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 443454,
              ""CONCEPT_NAME"": ""Cerebral infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""432504007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 441874,
              ""CONCEPT_NAME"": ""Cerebral thrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""71444005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 7,
      ""name"": ""[LEGEND HTN] intracranial bleed Hemorrhagic stroke"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 376713,
              ""CONCEPT_NAME"": ""Cerebral hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""274100004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 439847,
              ""CONCEPT_NAME"": ""Intracranial hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1386000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 432923,
              ""CONCEPT_NAME"": ""Subarachnoid hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""21454007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 9,
      ""name"": ""[LEGEND HTN] Heart Failure "",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 315295,
              ""CONCEPT_NAME"": ""Congestive rheumatic heart failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""82523003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 316139,
              ""CONCEPT_NAME"": ""Heart failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""84114007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [180]
  },
  ""CensorWindow"": {}
}
"
angioedema,Angioedema events,7377,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 6 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (432791)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (432791)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 6))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 6,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 6,
      ""name"": ""[LEGEND HTN] Angioedema"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 432791,
              ""CONCEPT_NAME"": ""Angioedema"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""41291007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
cardiacArrhythmia,Person with cardiac arrhythmia,7399,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (44784217,38001137,38001138,315078,444070)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (44784217,38001137,38001138,315078,444070)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 1 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (21600248,43013024,40228152,40241331,1310149,1309204,45892847)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (21600248,43013024,40228152,40241331,1310149,1309204,45892847)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (45890325,45890400,2107068,4051932)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (45890325,45890400,2107068,4051932)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* , row_number() over (PARTITION BY co.person_id ORDER BY co.condition_start_date, co.condition_occurrence_id) as ordinal
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C

WHERE C.ordinal = 1
-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,1,P.START_DATE) AND A.START_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 1 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Drug Exposure Criteria
select C.person_id, C.drug_exposure_id as event_id, C.drug_exposure_start_date as start_date,
       COALESCE(C.drug_exposure_end_date, DATEADD(day, 1, C.drug_exposure_start_date)) as end_date, C.drug_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.drug_exposure_start_date as sort_date
from 
(
  select de.* 
  FROM @cdm_database_schema.DRUG_EXPOSURE de
JOIN #Codesets codesets on ((de.drug_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Drug Exposure Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,0,P.START_DATE) AND A.START_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 2
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 2 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Procedure Occurrence Criteria
select C.person_id, C.procedure_occurrence_id as event_id, C.procedure_date as start_date, DATEADD(d,1,C.procedure_date) as END_DATE,
       C.procedure_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.procedure_date as sort_date
from 
(
  select po.* 
  FROM @cdm_database_schema.PROCEDURE_OCCURRENCE po
JOIN #Codesets codesets on ((po.procedure_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Procedure Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,0,P.START_DATE) AND A.START_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE
WHERE QE.ordinal = 1
;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 0,
          ""First"": true,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""First""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 0,
            ""ConditionTypeExclude"": false
          },
          ""DrugExposure"": {},
          ""ProcedureOccurrence"": {}
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 1,
            ""Coeff"": 1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {},
          ""DrugExposure"": {
            ""CodesetId"": 1,
            ""DrugTypeExclude"": false
          },
          ""ProcedureOccurrence"": {}
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 2,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {},
          ""DrugExposure"": {},
          ""ProcedureOccurrence"": {
            ""CodesetId"": 2,
            ""ProcedureTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 0,
      ""name"": ""[LEGEND HTN] Cardiac arrhythmia"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 44784217,
              ""CONCEPT_NAME"": ""Cardiac arrhythmia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""698247007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 38001137,
              ""CONCEPT_NAME"": ""Cardiac arrhythmia & conduction disorders w CC"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""309"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""DRG"",
              ""CONCEPT_CLASS_ID"": ""MS-DRG""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 38001138,
              ""CONCEPT_NAME"": ""Cardiac arrhythmia & conduction disorders w/o CC/MCC"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""310"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""DRG"",
              ""CONCEPT_CLASS_ID"": ""MS-DRG""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 315078,
              ""CONCEPT_NAME"": ""Palpitations"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""80313002"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 444070,
              ""CONCEPT_NAME"": ""Tachycardia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""3424008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 1,
      ""name"": ""[LEGEND HTN] Drugs used to treat cardiac arrhythmia"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 21600248,
              ""CONCEPT_NAME"": ""ANTIARRHYTHMICS, CLASS I AND III"",
              ""STANDARD_CONCEPT"": ""C"",
              ""STANDARD_CONCEPT_CAPTION"": ""Classification"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""C01B"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""ATC"",
              ""CONCEPT_CLASS_ID"": ""ATC 3rd""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 43013024,
              ""CONCEPT_NAME"": ""apixaban"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1364430"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""RxNorm"",
              ""CONCEPT_CLASS_ID"": ""Ingredient""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 40228152,
              ""CONCEPT_NAME"": ""dabigatran etexilate"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1037042"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""RxNorm"",
              ""CONCEPT_CLASS_ID"": ""Ingredient""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 40241331,
              ""CONCEPT_NAME"": ""rivaroxaban"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1114195"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""RxNorm"",
              ""CONCEPT_CLASS_ID"": ""Ingredient""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 1310149,
              ""CONCEPT_NAME"": ""Warfarin"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""11289"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""RxNorm"",
              ""CONCEPT_CLASS_ID"": ""Ingredient""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 1309204,
              ""CONCEPT_NAME"": ""Adenosine"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""296"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""RxNorm"",
              ""CONCEPT_CLASS_ID"": ""Ingredient""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 45892847,
              ""CONCEPT_NAME"": ""edoxaban"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1599538"",
              ""DOMAIN_ID"": ""Drug"",
              ""VOCABULARY_ID"": ""RxNorm"",
              ""CONCEPT_CLASS_ID"": ""Ingredient""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 2,
      ""name"": ""[LEGEND HTN] Procedures to treat cardiac arrhythmia"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 45890325,
              ""CONCEPT_NAME"": ""Cardioversion, elective, electrical conversion of arrhythmia"",
              ""STANDARD_CONCEPT"": ""C"",
              ""STANDARD_CONCEPT_CAPTION"": ""Classification"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1012978"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""CPT4"",
              ""CONCEPT_CLASS_ID"": ""CPT4 Hierarchy""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 45890400,
              ""CONCEPT_NAME"": ""Operative tissue ablation and reconstruction of atria, extensive (eg, maze procedure)"",
              ""STANDARD_CONCEPT"": ""C"",
              ""STANDARD_CONCEPT_CAPTION"": ""Classification"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1014679"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""CPT4"",
              ""CONCEPT_CLASS_ID"": ""CPT4 Hierarchy""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 2107068,
              ""CONCEPT_NAME"": ""Operative tissue ablation and reconstruction of atria, performed at the time of other cardiac procedure(s), extensive (eg, maze procedure), with cardiopulmonary bypass (List separately in addition to code for primary procedure)"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""33259"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""CPT4"",
              ""CONCEPT_CLASS_ID"": ""CPT4""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4051932,
              ""CONCEPT_NAME"": ""Procedure for arrhythmia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""233154000"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Procedure""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
bradycardia,Persons with bradycardia,7404,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 5 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4169095,316999,4171683,317302)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4169095,4171683,317302)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* , row_number() over (PARTITION BY co.person_id ORDER BY co.condition_start_date, co.condition_occurrence_id) as ordinal
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 5))
) C

WHERE C.ordinal = 1
-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 5))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,1,P.START_DATE) AND A.START_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE
WHERE QE.ordinal = 1
;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 5,
          ""First"": true,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""First""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ALL""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 5,
            ""ConditionTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 1,
            ""Coeff"": 1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 5,
      ""name"": ""[LEGEND HTN] Bradycardia"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4169095,
              ""CONCEPT_NAME"": ""Bradycardia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""48867003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 316999,
              ""CONCEPT_NAME"": ""Conduction disorder of the heart"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""44808001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4171683,
              ""CONCEPT_NAME"": ""Sinus bradycardia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""49710005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 317302,
              ""CONCEPT_NAME"": ""Sinus node dysfunction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""60423000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
gastrointestinalBleeding,Gastrointestinal bleeding events,7376,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 5 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4147683,40482685,28779,2002608,198798,4198381,4112183,2108900,2108878,4265600,192671,4027663)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (40482685,28779,2002608,198798,4198381,4112183,2108900,2108878,4265600,192671,4027663)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4138962,4195231,4163865,195584,4222896,4296611,200769,4177387,434400,438795,4204555,24973,23808,4209746,4248429,4101104,443530,197925,4291028)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4138962,4195231,4163865,195584,4222896,4296611,200769,4177387,434400,438795,4204555,24973,23808,4209746,4248429,4101104,443530,197925,4291028)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 5))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 5,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 5,
      ""name"": ""[LEGEND HTN] Gastrointestinal hemorrhage GI bleeding"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4138962,
              ""CONCEPT_NAME"": ""Acute duodenal ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""32490005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4195231,
              ""CONCEPT_NAME"": ""Acute gastric ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""67964002"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4147683,
              ""CONCEPT_NAME"": ""Acute gastrojejunal ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""30514008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4163865,
              ""CONCEPT_NAME"": ""Acute peptic ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""45485004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 195584,
              ""CONCEPT_NAME"": ""Acute peptic ulcer without hemorrhage AND without perforation but with obstruction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""58085004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 40482685,
              ""CONCEPT_NAME"": ""Angiodysplasia of duodenum"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""442267002"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 28779,
              ""CONCEPT_NAME"": ""Bleeding esophageal varices"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""17709002"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4222896,
              ""CONCEPT_NAME"": ""Chronic duodenal ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""40214005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4296611,
              ""CONCEPT_NAME"": ""Chronic gastric ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""76796008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 200769,
              ""CONCEPT_NAME"": ""Chronic gastric ulcer without hemorrhage, without perforation AND without obstruction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1567007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4177387,
              ""CONCEPT_NAME"": ""Chronic gastrojejunal ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""4269005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 434400,
              ""CONCEPT_NAME"": ""Chronic gastrojejunal ulcer without hemorrhage AND without perforation but with obstruction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""56579005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 438795,
              ""CONCEPT_NAME"": ""Chronic gastrojejunal ulcer without hemorrhage, without perforation AND without obstruction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""41626001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4204555,
              ""CONCEPT_NAME"": ""Chronic peptic ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""5492000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 24973,
              ""CONCEPT_NAME"": ""Chronic peptic ulcer without hemorrhage AND without perforation but with obstruction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""12384004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 23808,
              ""CONCEPT_NAME"": ""Chronic peptic ulcer without hemorrhage, without perforation AND without obstruction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""60400003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 2002608,
              ""CONCEPT_NAME"": ""Control of hemorrhage and suture of ulcer of stomach or duodenum"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""44.4"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""ICD9Proc"",
              ""CONCEPT_CLASS_ID"": ""3-dig nonbill code""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 198798,
              ""CONCEPT_NAME"": ""Dieulafoy's vascular malformation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""109558001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4198381,
              ""CONCEPT_NAME"": ""Duodenal ulcer disease"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""51868009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4209746,
              ""CONCEPT_NAME"": ""Duodenal ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""56776001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4112183,
              ""CONCEPT_NAME"": ""Esophageal varices with bleeding, associated with another disorder"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""195475003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 2108900,
              ""CONCEPT_NAME"": ""Esophagogastroduodenoscopy, flexible, transoral; with control of bleeding, any method"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""43255"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""CPT4"",
              ""CONCEPT_CLASS_ID"": ""CPT4""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 2108878,
              ""CONCEPT_NAME"": ""Esophagoscopy, flexible, transoral; with control of bleeding, any method"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""43227"",
              ""DOMAIN_ID"": ""Procedure"",
              ""VOCABULARY_ID"": ""CPT4"",
              ""CONCEPT_CLASS_ID"": ""CPT4""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4265600,
              ""CONCEPT_NAME"": ""Gastric ulcer"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""397825006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4248429,
              ""CONCEPT_NAME"": ""Gastric ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""73481001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 192671,
              ""CONCEPT_NAME"": ""Gastrointestinal hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""74474003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4101104,
              ""CONCEPT_NAME"": ""Gastrojejunal ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""2783007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 443530,
              ""CONCEPT_NAME"": ""Hematochezia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""405729008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 197925,
              ""CONCEPT_NAME"": ""Hemorrhage of rectum and anus"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""266464001"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4027663,
              ""CONCEPT_NAME"": ""Peptic ulcer"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""13200003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4291028,
              ""CONCEPT_NAME"": ""Peptic ulcer without hemorrhage AND without perforation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""37442009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
allCauseMortality,All-cause mortality,7361,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;




with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Death Criteria
select C.person_id, C.person_id as event_id, C.death_date as start_date, DATEADD(d,1,C.death_date) as end_date,
       coalesce(C.cause_concept_id,0) as TARGET_CONCEPT_ID, CAST(NULL as bigint) as visit_occurrence_id,
       C.death_date as sort_date
from 
(
  select d.*
  FROM @cdm_database_schema.DEATH d

) C


-- End Death Criteria


  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""Death"": {
          ""DeathTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""First""]
    }
  },
  ""ConceptSets"": [],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
cardiovascularRelatedMortality,Cardiovascular-related mortality,7362,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4329847)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4329847)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (314666)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (314666)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 1 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (376713,439847,432923)

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 3 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4048809,321042,442289,4317150,4132309)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4048809,321042,442289,4317150,4132309)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (437894)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (437894)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 4 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (316139)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (316139)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (315295)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (315295)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 5 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 6 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (372924,375557,443454,441874)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (443454)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Death Criteria
select C.person_id, C.person_id as event_id, C.death_date as start_date, DATEADD(d,1,C.death_date) as end_date,
       coalesce(C.cause_concept_id,0) as TARGET_CONCEPT_ID, CAST(NULL as bigint) as visit_occurrence_id,
       C.death_date as sort_date
from 
(
  select d.*
  FROM @cdm_database_schema.DEATH d

) C


-- End Death Criteria


  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 0))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,-30,P.START_DATE) AND A.START_DATE <= DATEADD(day,7,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 1 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 6))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,-30,P.START_DATE) AND A.START_DATE <= DATEADD(day,7,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 2 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 1))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,-30,P.START_DATE) AND A.START_DATE <= DATEADD(day,7,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 3 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 3))
) C


-- End Condition Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,-30,P.START_DATE) AND A.START_DATE <= DATEADD(day,7,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

UNION ALL
-- Begin Correlated Criteria
SELECT 4 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  select PE.person_id, PE.event_id, PE.start_date, PE.end_date, PE.target_concept_id, PE.visit_occurrence_id, PE.sort_date FROM (
-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 4))
) C


-- End Condition Occurrence Criteria

) PE
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM (SELECT Q.person_id, Q.event_id, Q.start_date, Q.end_date, Q.visit_occurrence_id, OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date
FROM (-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 4))
) C


-- End Condition Occurrence Criteria
) Q
JOIN @cdm_database_schema.OBSERVATION_PERIOD OP on Q.person_id = OP.person_id 
  and OP.observation_period_start_date <= Q.start_date and OP.observation_period_end_date >= Q.start_date
) E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM (SELECT Q.person_id, Q.event_id, Q.start_date, Q.end_date, Q.visit_occurrence_id, OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date
FROM (-- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 4))
) C


-- End Condition Occurrence Criteria
) Q
JOIN @cdm_database_schema.OBSERVATION_PERIOD OP on Q.person_id = OP.person_id 
  and OP.observation_period_start_date <= Q.start_date and OP.observation_period_end_date >= Q.start_date
) P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 5))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,-30,P.START_DATE) AND A.START_DATE <= DATEADD(day,7,P.START_DATE)
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE
WHERE QE.ordinal = 1
;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 0, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,0,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;





TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""Death"": {
          ""DeathTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""First""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 0,
            ""ConditionTypeExclude"": false,
            ""CorrelatedCriteria"": {
              ""CriteriaList"": {},
              ""DemographicCriteriaList"": {},
              ""Groups"": {}
            }
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 30,
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 7,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 6,
            ""ConditionTypeExclude"": false,
            ""CorrelatedCriteria"": {
              ""CriteriaList"": {},
              ""DemographicCriteriaList"": {},
              ""Groups"": {}
            }
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 30,
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 7,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 1,
            ""ConditionTypeExclude"": false,
            ""CorrelatedCriteria"": {
              ""CriteriaList"": {},
              ""DemographicCriteriaList"": {},
              ""Groups"": {}
            }
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 30,
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 7,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 3,
            ""ConditionTypeExclude"": false,
            ""CorrelatedCriteria"": {
              ""CriteriaList"": {},
              ""DemographicCriteriaList"": {},
              ""Groups"": {}
            }
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 30,
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 7,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      },
      {
        ""Criteria"": {
          ""ConditionOccurrence"": {
            ""CodesetId"": 4,
            ""ConditionTypeExclude"": false,
            ""CorrelatedCriteria"": {
              ""Type"": ""ALL"",
              ""CriteriaList"": [
                {
                  ""Criteria"": {
                    ""VisitOccurrence"": {
                      ""CodesetId"": 5,
                      ""VisitTypeExclude"": false
                    }
                  },
                  ""StartWindow"": {
                    ""Start"": {
                      ""Coeff"": -1
                    },
                    ""End"": {
                      ""Days"": 0,
                      ""Coeff"": 1
                    },
                    ""UseEventEnd"": false
                  },
                  ""EndWindow"": {
                    ""Start"": {
                      ""Days"": 0,
                      ""Coeff"": -1
                    },
                    ""End"": {
                      ""Coeff"": 1
                    },
                    ""UseEventEnd"": true
                  },
                  ""RestrictVisit"": false,
                  ""IgnoreObservationPeriod"": false,
                  ""Occurrence"": {
                    ""Type"": 2,
                    ""Count"": 1,
                    ""IsDistinct"": false
                  }
                }
              ],
              ""DemographicCriteriaList"": [],
              ""Groups"": []
            }
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Days"": 30,
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 7,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 0,
      ""name"": ""[LEGEND HTN] Acute myocardial Infarction"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4329847,
              ""CONCEPT_NAME"": ""Myocardial infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""22298006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 314666,
              ""CONCEPT_NAME"": ""Old myocardial infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1755008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 1,
      ""name"": ""[LEGEND HTN] intracranial bleed Hemorrhagic stroke"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 376713,
              ""CONCEPT_NAME"": ""Cerebral hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""274100004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 439847,
              ""CONCEPT_NAME"": ""Intracranial hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1386000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 432923,
              ""CONCEPT_NAME"": ""Subarachnoid hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""21454007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 3,
      ""name"": ""[LEGEND HTN] Sudden cardiac death"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4048809,
              ""CONCEPT_NAME"": ""Brainstem death"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""230802007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 321042,
              ""CONCEPT_NAME"": ""Cardiac arrest"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""410429000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 442289,
              ""CONCEPT_NAME"": ""Death in less than 24 hours from onset of symptoms"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""53559009"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4317150,
              ""CONCEPT_NAME"": ""Sudden cardiac death"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""95281009"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 4132309,
              ""CONCEPT_NAME"": ""Sudden death"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""26636000"",
              ""DOMAIN_ID"": ""Observation"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 437894,
              ""CONCEPT_NAME"": ""Ventricular fibrillation"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""71908006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 4,
      ""name"": ""[LEGEND HTN] Heart Failure "",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 315295,
              ""CONCEPT_NAME"": ""Congestive rheumatic heart failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""82523003"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 316139,
              ""CONCEPT_NAME"": ""Heart failure"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""84114007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 5,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 6,
      ""name"": ""[LEGEND HTN] Ischemic stroke"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 372924,
              ""CONCEPT_NAME"": ""Cerebral artery occlusion"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""20059004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 375557,
              ""CONCEPT_NAME"": ""Cerebral embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""75543006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 443454,
              ""CONCEPT_NAME"": ""Cerebral infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""432504007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 441874,
              ""CONCEPT_NAME"": ""Cerebral thrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""71444005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""First""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""First""]
  },
  ""InclusionRules"": [],
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [0]
  },
  ""CensorWindow"": {}
}
"
transientIschemicAttack,Transient ischemic attack events,7370,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 4 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (373503)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (373503)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 4))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 30, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,30,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 4,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 4,
      ""name"": ""[LEGEND HTN] Transient ischemic attack (TIA) Transient cerebral Ischemia (TCA)"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 373503,
              ""CONCEPT_NAME"": ""Transient cerebral ischemia"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""266257000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [30]
  },
  ""CensorWindow"": {}
}
"
stroke,Stroke (ischemic or hemorrhagic) events,7464,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 3 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (372924,375557,376713,443454,441874,439847,432923)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (443454)
  and c.invalid_reason is null

) I
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 3))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,1,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 180, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,180,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 3,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 1,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 3,
      ""name"": ""[LEGEND HTN] Stroke (ischemic or hemorrhagic)"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 372924,
              ""CONCEPT_NAME"": ""Cerebral artery occlusion"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""20059004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 375557,
              ""CONCEPT_NAME"": ""Cerebral embolism"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""75543006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 376713,
              ""CONCEPT_NAME"": ""Cerebral hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""274100004"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 443454,
              ""CONCEPT_NAME"": ""Cerebral infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""432504007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 441874,
              ""CONCEPT_NAME"": ""Cerebral thrombosis"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""71444005"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 439847,
              ""CONCEPT_NAME"": ""Intracranial hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1386000"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 432923,
              ""CONCEPT_NAME"": ""Subarachnoid hemorrhage"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""21454007"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": false,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [180]
  },
  ""CensorWindow"": {}
}
"
acuteMyocardialInfarction,Acute myocardial infarction events,7364,"CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 2 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (262,9203,9201)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (262,9203,9201)
  and c.invalid_reason is null

) I
) C;
INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 3 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4329847)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4329847)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (314666)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (314666)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;


with primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as
(
-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
       C.CONDITION_CONCEPT_ID as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.condition_start_date as sort_date
FROM 
(
  SELECT co.* 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets codesets on ((co.condition_concept_id = codesets.concept_id and codesets.codeset_id = 3))
) C


-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P

-- End Primary Events

)
SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM primary_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM primary_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
SELECT 0 as index_id, p.person_id, p.event_id
FROM primary_events P
INNER JOIN
(
  -- Begin Visit Occurrence Criteria
select C.person_id, C.visit_occurrence_id as event_id, C.visit_start_date as start_date, C.visit_end_date as end_date,
       C.visit_concept_id as TARGET_CONCEPT_ID, C.visit_occurrence_id,
       C.visit_start_date as sort_date
from 
(
  select vo.* 
  FROM @cdm_database_schema.VISIT_OCCURRENCE vo
JOIN #Codesets codesets on ((vo.visit_concept_id = codesets.concept_id and codesets.codeset_id = 2))
) C


-- End Visit Occurrence Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= DATEADD(day,0,P.START_DATE) AND A.END_DATE >= DATEADD(day,0,P.START_DATE) AND A.END_DATE <= P.OP_END_DATE
GROUP BY p.person_id, p.event_id
HAVING COUNT(A.TARGET_CONCEPT_ID) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) > 0
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id and AC.event_id = pe.event_id

) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

with cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as
(
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups

)
select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM cteIncludedEvents Results

;

-- date offset strategy

select event_id, person_id, 
  case when DATEADD(day,7,start_date) > start_date then DATEADD(day,7,start_date) else start_date end as end_date
INTO #strategy_ends
from #included_events;


-- generate cohort periods into #final_cohort
with cohort_ends (event_id, person_id, end_date) as
(
	-- cohort exit dates
  -- End Date Strategy
SELECT event_id, person_id, end_date from #strategy_ends

),
first_ends (person_id, start_date, end_date) as
(
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal 
	  from #included_events I
	  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
)
select person_id, start_date, end_date
INTO #cohort_rows
from first_ends;

with cteEndDates (person_id, end_date) AS -- the magic
(	
	SELECT
		person_id
		, DATEADD(day,-1 * 180, event_date)  as end_date
	FROM
	(
		SELECT
			person_id
			, event_date
			, event_type
			, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal 
			, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord
		FROM
		(
			SELECT
				person_id
				, start_date AS event_date
				, -1 AS event_type
				, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal
			FROM #cohort_rows
		
			UNION ALL
		

			SELECT
				person_id
				, DATEADD(day,180,end_date) as end_date
				, 1 AS event_type
				, NULL
			FROM #cohort_rows
		) RAWDATA
	) e
	WHERE (2 * e.start_ordinal) - e.overall_ord = 0
),
cteEnds (person_id, start_date, end_date) AS
(
	SELECT
		 c.person_id
		, c.start_date
		, MIN(e.end_date) AS end_date
	FROM #cohort_rows c
	JOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
)
select person_id, min(start_date) as start_date, end_date
into #final_cohort
from cteEnds
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select ir.cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from @results_database_schema.cohort_inclusion ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
WHERE ir.cohort_definition_id = @target_cohort_id
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from @results_database_schema.cohort_inclusion where cohort_definition_id = @target_cohort_id) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

-- BEGIN: Censored Stats

-- END: Censored Stats

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;



TRUNCATE TABLE #strategy_ends;
DROP TABLE #strategy_ends;


TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
","{
  ""cdmVersionRange"": ["">=5.0.0""],
  ""PrimaryCriteria"": {
    ""CriteriaList"": [
      {
        ""ConditionOccurrence"": {
          ""CodesetId"": 3,
          ""ConditionTypeExclude"": false
        }
      }
    ],
    ""ObservationWindow"": {
      ""PriorDays"": [0],
      ""PostDays"": [0]
    },
    ""PrimaryCriteriaLimit"": {
      ""Type"": [""All""]
    }
  },
  ""AdditionalCriteria"": {
    ""Type"": [""ANY""],
    ""CriteriaList"": [
      {
        ""Criteria"": {
          ""VisitOccurrence"": {
            ""CodesetId"": 2,
            ""VisitTypeExclude"": false
          }
        },
        ""StartWindow"": {
          ""Start"": {
            ""Coeff"": -1
          },
          ""End"": {
            ""Days"": 0,
            ""Coeff"": 1
          },
          ""UseEventEnd"": false
        },
        ""EndWindow"": {
          ""Start"": {
            ""Days"": 0,
            ""Coeff"": -1
          },
          ""End"": {
            ""Coeff"": 1
          },
          ""UseEventEnd"": true
        },
        ""RestrictVisit"": false,
        ""IgnoreObservationPeriod"": false,
        ""Occurrence"": {
          ""Type"": 2,
          ""Count"": 1,
          ""IsDistinct"": false
        }
      }
    ],
    ""DemographicCriteriaList"": [],
    ""Groups"": []
  },
  ""ConceptSets"": [
    {
      ""id"": 2,
      ""name"": ""Inpatient or ER visit"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 262,
              ""CONCEPT_NAME"": ""Emergency Room and Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ERIP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9203,
              ""CONCEPT_NAME"": ""Emergency Room Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""ER"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 9201,
              ""CONCEPT_NAME"": ""Inpatient Visit"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""IP"",
              ""DOMAIN_ID"": ""Visit"",
              ""VOCABULARY_ID"": ""Visit"",
              ""CONCEPT_CLASS_ID"": ""Visit""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    },
    {
      ""id"": 3,
      ""name"": ""[LEGEND HTN] Acute myocardial Infarction"",
      ""expression"": {
        ""items"": [
          {
            ""concept"": {
              ""CONCEPT_ID"": 4329847,
              ""CONCEPT_NAME"": ""Myocardial infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""22298006"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": false,
            ""includeDescendants"": true,
            ""includeMapped"": false
          },
          {
            ""concept"": {
              ""CONCEPT_ID"": 314666,
              ""CONCEPT_NAME"": ""Old myocardial infarction"",
              ""STANDARD_CONCEPT"": ""S"",
              ""STANDARD_CONCEPT_CAPTION"": ""Standard"",
              ""INVALID_REASON"": ""V"",
              ""INVALID_REASON_CAPTION"": ""Valid"",
              ""CONCEPT_CODE"": ""1755008"",
              ""DOMAIN_ID"": ""Condition"",
              ""VOCABULARY_ID"": ""SNOMED"",
              ""CONCEPT_CLASS_ID"": ""Clinical Finding""
            },
            ""isExcluded"": true,
            ""includeDescendants"": true,
            ""includeMapped"": false
          }
        ]
      }
    }
  ],
  ""QualifiedLimit"": {
    ""Type"": [""All""]
  },
  ""ExpressionLimit"": {
    ""Type"": [""All""]
  },
  ""InclusionRules"": [],
  ""EndStrategy"": {
    ""DateOffset"": {
      ""DateField"": [""StartDate""],
      ""Offset"": [7]
    }
  },
  ""CensoringCriteria"": [],
  ""CollapseSettings"": {
    ""CollapseType"": [""ERA""],
    ""EraPad"": [180]
  },
  ""CensorWindow"": {}
}
"
